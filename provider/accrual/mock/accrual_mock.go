// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/atrush/diploma.git/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAccrualProvider is a mock of AccrualProvider interface.
type MockAccrualProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAccrualProviderMockRecorder
}

// MockAccrualProviderMockRecorder is the mock recorder for MockAccrualProvider.
type MockAccrualProviderMockRecorder struct {
	mock *MockAccrualProvider
}

// NewMockAccrualProvider creates a new mock instance.
func NewMockAccrualProvider(ctrl *gomock.Controller) *MockAccrualProvider {
	mock := &MockAccrualProvider{ctrl: ctrl}
	mock.recorder = &MockAccrualProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccrualProvider) EXPECT() *MockAccrualProviderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAccrualProvider) Get(ctx context.Context, number string) (model.Accrual, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, number)
	ret0, _ := ret[0].(model.Accrual)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccrualProviderMockRecorder) Get(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccrualProvider)(nil).Get), ctx, number)
}
