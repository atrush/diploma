// Code generated by MockGen. DO NOT EDIT.
// Source: services/order/interface.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/atrush/diploma.git/model"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockOrderManager is a mock of OrderManager interface.
type MockOrderManager struct {
	ctrl     *gomock.Controller
	recorder *MockOrderManagerMockRecorder
}

// MockOrderManagerMockRecorder is the mock recorder for MockOrderManager.
type MockOrderManagerMockRecorder struct {
	mock *MockOrderManager
}

// NewMockOrderManager creates a new mock instance.
func NewMockOrderManager(ctrl *gomock.Controller) *MockOrderManager {
	mock := &MockOrderManager{ctrl: ctrl}
	mock.recorder = &MockOrderManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderManager) EXPECT() *MockOrderManagerMockRecorder {
	return m.recorder
}

// AddToUser mocks base method.
func (m *MockOrderManager) AddToUser(ctx context.Context, number string, userID uuid.UUID) (model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToUser", ctx, number, userID)
	ret0, _ := ret[0].(model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToUser indicates an expected call of AddToUser.
func (mr *MockOrderManagerMockRecorder) AddToUser(ctx, number, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToUser", reflect.TypeOf((*MockOrderManager)(nil).AddToUser), ctx, number, userID)
}

// GetForUser mocks base method.
func (m *MockOrderManager) GetForUser(ctx context.Context, userID uuid.UUID) ([]model.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForUser", ctx, userID)
	ret0, _ := ret[0].([]model.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForUser indicates an expected call of GetForUser.
func (mr *MockOrderManagerMockRecorder) GetForUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForUser", reflect.TypeOf((*MockOrderManager)(nil).GetForUser), ctx, userID)
}

// UpdateAccrual mocks base method.
func (m *MockOrderManager) UpdateAccrual(ctx context.Context, order model.Order, accrual model.Accrual) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccrual", ctx, order, accrual)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccrual indicates an expected call of UpdateAccrual.
func (mr *MockOrderManagerMockRecorder) UpdateAccrual(ctx, order, accrual interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccrual", reflect.TypeOf((*MockOrderManager)(nil).UpdateAccrual), ctx, order, accrual)
}

// UpdateStatus mocks base method.
func (m *MockOrderManager) UpdateStatus(ctx context.Context, id uuid.UUID, status model.OrderStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, id, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockOrderManagerMockRecorder) UpdateStatus(ctx, id, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockOrderManager)(nil).UpdateStatus), ctx, id, status)
}
